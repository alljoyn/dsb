# *****************************************************************************
#  Copyright AllSeen Alliance. All rights reserved.
#
#     Permission to use, copy, modify, and/or distribute this software for any
#     purpose with or without fee is hereby granted, provided that the above
#     copyright notice and this permission notice appear in all copies.
#
#     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#     WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#     MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#     ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#     WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#     ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#     OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# *****************************************************************************

import platform
import os
import string

Import('env')

env['CPPDEFPREFIX']     = '-D'
env['OBJSUFFIX']        = '.o'
env['CCCOM']            = '$CC -o $TARGET -c $CFLAGS $CCFLAGS $_CCCOMCOM $SOURCES'
env['CXXCOM']           = '$CXX $CFLAGS $CCFLAGS -std=gnu++98 $_CCCOMCOM -o $TARGET $SOURCES'
env['INCPREFIX']        = '-I'
env['PROGSUFFIX']       = '.elf'
env['LINKFLAGS']        = '-Xlinker -Map -Xlinker '
env['LINKCOM']          = '$LINK $PRELINKFLAGS $LINKSCRIPT $LIBPATHS -o $TARGET $__RPATH $SOURCES $_LIBFLAGS $LINKFLAGS'
env['LINK']             = '$CC'
env['LIBPREFIX']        = 'lib'
env['LIBSUFFIX']        = '.a'
env['MAXLINELENGTH']    = 10000

env.Replace(CC        = env.File('${ARM_TOOLCHAIN_DIR}/arm-none-eabi-gcc'))
env.Replace(CXX       = env.File('${ARM_TOOLCHAIN_DIR}/arm-none-eabi-g++'))
env.Replace(LINK      = env.File('${ARM_TOOLCHAIN_DIR}/arm-none-eabi-gcc'))
env.Replace(AR        = env.File('${ARM_TOOLCHAIN_DIR}/arm-none-eabi-ar'))

env.Append(CPPPATH    = [env['ajtcl_root'] + '/RTOS'])
env.Append(CPPPATH    = [env['ajtcl_root'] + '/RTOS/mbedRTOS'])
env.Append(CPPPATH    = [env['ajtcl_root'] + '/bsp'])
env.Append(CPPPATH    = [env['ajtcl_root'] + '/bsp/frdm'])
env.Append(CPPPATH    = [env['ajtcl_root'] + '/bsp/frdm/config'])
env.Append(CPPPATH    = [env['FREE_RTOS_DIR'] + '/Source/include'])
env.Append(CPPPATH    = [env['FREE_RTOS_DIR'] + '/Source/portable/GCC/ARM_CM3'])

env.Append(CPPDEFINES = ['DUK_F_BCC'])

env['CCFLAGS']        = ['-mcpu=cortex-m4',
                         '-mthumb',
                         '-Wl,--gc-sections',
                         '-u',
                         '_printf_float',
                         '-u',
                         '_scanf_float',
                         '-mfpu=fpv4-sp-d16',
                         '-mfloat-abi=softfp',
                         '-c',
                         '-g',
                         '-fno-common',
                         '-Wformat-security',
                         '-Werror=format-security']

env['PRELINKFLAGS']   = ['-mcpu=cortex-m4',
                         '-mthumb',
                         '-Wl,--gc-sections',
                         '--specs=nano.specs',
                         '-u',
                         '_printf_float',
                         '-u',
                         '_scanf_float']

env['LINKSCRIPT']     = ['-T' + env['MBED_DIR'] + '/mbed/TARGET_K64F/TOOLCHAIN_GCC_ARM/K64FN1M0xxx12.ld']
env['LIBPATHS']       = ['-L' + env['MBED_DIR'] + '/mbed/TARGET_K64F/TOOLCHAIN_GCC_ARM']
env['LINKFLAGS']      = ['-lstdc++',
                         '-lgcc',
                         '-lmbed',
                         '-lm',
                         '-lc',
                         '-Wl,-Map,${TARGET.base}.map']

# Debug/Release Variants
if env['VARIANT'] == 'debug':
    env.Append(CFLAGS=['-g'])
    env.Append(CFLAGS=['-ggdb'])
    env.Append(CFLAGS=['-O0'])
    env.Append(CPPDEFINES=['DUK_OPT_DEBUGGER_SUPPORT'])
    env.Append(CPPDEFINES=['DUK_OPT_INTERRUPT_COUNTER'])
    env.Append(CPPDEFINES=['DUK_CMDLINE_DEBUGGER_SUPPORT'])
else:
    env.Append(CPPDEFINES=['NDEBUG'])
    env.Append(CFLAGS=['-Os'])
    env.Append(LINKFLAGS=['-s'])

env.Append(CPPDEFINES = ['TARGET_K64F',
                         'TARGET_M4',
                         'TARGET_Freescale',
                         'TARGET_KPSDK_MCUS',
                         'TARGET_KPSDK_CODE',
                         'TARGET_MCU_K64F',
                         'TARGET_FRDM',
                         'TOOLCHAIN_GCC_ARM',
                         'TOOLCHAIN_GCC',
                         '__CORTEX_M4',
                         'ARM_MATH_CM4',
                         '__FPU_PRESENT=1',
                         'MBED_BUILD_TIMESTAMP=1411582835.22',
                         '__MBED__=1',
                         'CPU_MK64FN1M0VMD12',
                         'FSL_RTOS_MBED',
                         'TARGET_FF_ARDUINO',
                         '-D_FORTIFY_SOURCE=1'
                         ])

env['objects']        = [env['MBED_DIR'] + '/mbed/TARGET_K64F/TOOLCHAIN_GCC_ARM/startup_MK64F12.o',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TOOLCHAIN_GCC_ARM/cmsis_nvic.o',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TOOLCHAIN_GCC_ARM/system_MK64F12.o',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TOOLCHAIN_GCC_ARM/mbed_overrides.o',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TOOLCHAIN_GCC_ARM/board.o',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TOOLCHAIN_GCC_ARM/retarget.o' ]

env.Append(CPPPATH    = ['.',
                         '../../',
                         env['MBED_DIR'] + '/mbed',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F_Freescale',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/can',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/edma',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/sdhc',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/pit',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/flextimer',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/smc',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/uart',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/pmc',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/mcg',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/port',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/wdog',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/adc',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/osc',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/enet',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/i2c',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/gpio',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/rtc',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/dmamux',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/sim',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/sai',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/hal/dspi',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/utilities',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/drivers',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/drivers/pit',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/drivers/clock',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/drivers/clock/src',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/drivers/enet',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/drivers/interrupt',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/common',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_KPSDK_CODE/common/phyksz8081',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_MCU_K64F',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_MCU_K64F/device',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_MCU_K64F/device/MK64F12',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TARGET_Freescale/TARGET_KPSDK_MCUS/TARGET_MCU_K64F/TARGET_FRDM',
                         env['MBED_DIR'] + '/mbed/TARGET_K64F/TOOLCHAIN_GCC_ARM'])

env.Append(LIBS       = [env['ajtcl_root'] + '/libajtcl_frdm'])

if env['DUKTAPE_SEPARATE'] == 'true':
    duktape_sources   = Glob(env['duktape_dist'] + '/src-separate/*.c')
else:
    duktape_sources   = Glob(env['duktape_dist'] + '/src/*.c')

sources = []
svcs_sources = []
svcs_sources.append(Glob(env['svcs_root'] + '/services_common/src/*.c'))
svcs_sources.append(Glob(env['svcs_root'] + '/notification/src/NotificationCommon/*.c'))
svcs_sources.append(Glob(env['svcs_root'] + '/notification/src/NotificationProducer/*.c'))
svcs_sources.append(Glob(env['svcs_root'] + '/config/src/*.c'))
svcs_sources.append(Glob(env['svcs_root'] + '/controlpanel/src/CPSControllee/*.c'))
svcs_sources.append(Glob(env['svcs_root'] + '/controlpanel/src/CPSControllee/Common/*.c'))
svcs_sources.append(Glob(env['svcs_root'] + '/controlpanel/src/CPSControllee/Widgets/*.c'))
svcs_sources.append(Glob(env['svcs_root'] + '/onboarding/src/*.c'))

ajs_sources = [
     '../../ajs.c',
     '../../ajs_attach.c',
     '../../ajs_console.c',
     '../../ajs_cps.c',
     '../../ajs_ctrlpanel.c',
     '../../ajs_io.c',
     '../../ajs_handlers.c',
     '../../ajs_heap.c',
     '../../ajs_marshal.c',
     '../../ajs_msgloop.c',
     '../../ajs_notif.c',
     '../../ajs_propstore.c',
     '../../ajs_services.c',
     '../../ajs_sessions.c',
     '../../ajs_tables.c',
     '../../ajs_timer.c',
     '../../ajs_translations.c',
     '../../ajs_util.c',
     '../../ajs_unmarshal.c',
     '../../ajs_debugger.c',
     'ajs_main.c',
     'ajs_malloc.c',
     'io/io_info.c',
     'io/io_stubs.c',
     'io/io_gpio.cpp',
     'io/io_spi.cpp',
     'io/io_uart.cpp',
     'io/io_i2c.cpp',
     'io/io_adc.cpp'
]

sources.append(env['objects'])
sources.append(ajs_sources)
sources.append(svcs_sources)
sources.append(duktape_sources)

env.Program('alljoynjs', sources)
