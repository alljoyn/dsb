# *****************************************************************************
#  Copyright AllSeen Alliance. All rights reserved.
#
#     Permission to use, copy, modify, and/or distribute this software for any
#     purpose with or without fee is hereby granted, provided that the above
#     copyright notice and this permission notice appear in all copies.
#
#     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#     WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#     MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#     ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#     WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#     ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#     OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# *****************************************************************************

import platform
import os
import string

#
# We need to know where to find the AllJoyn SDK
#
if (not(os.environ.has_key('ALLJOYN_DISTDIR'))):
    print('Error: ALLJOYN_DISTDIR environment variable must be set')
    Exit(1)

#
# Initialize our build environment
#
env = Environment(ENV = os.environ)

#
# Building for debug or release
#
env['VARIANT'] = ARGUMENTS.get('VARIANT', 'debug');

####################################
# 
# Platform and target setup
#
####################################

CPU=platform.machine()

#We do not support x86_64 on darwin, force to x86
if env['PLATFORM'] == 'darwin' and CPU == 'x86_64':
    CPU='x86'

if CPU == 'x86_64':
    env.Append(CPPDEFINES=['QCC_CPU_X86_64'])
else:
    env.Append(CPPDEFINES=['QCC_CPU_X86'])

if env['PLATFORM'] == 'win32':
    env.Append(LIBS=['setupapi','user32','winmm','ws2_32','iphlpapi','secur32','Advapi32','crypt32','bcrypt','ncrypt'])
    # Compiler flags
    env.Append(CPPDEFINES=['QCC_OS_GROUP_WINDOWS'])
    env.Append(CPPDEFINES=['WIN32', '_CONSOLE', '_LIB', '_UNICODE', 'UNICODE'])
    env.Append(CXXFLAGS=['/nologo', '/vmm', '/vmg'])
    env.Append(CXXFLAGS=['/EHsc'])
    env.Append(CXXFLAGS=['/wd4355'])
    # Linker flags
    env.Append(LFLAGS=['/NODEFAULTLIB:libcmt.lib', 'SUBSYSTEM:CONSOLE'])
    env.Append(LINKFLAGS=['/NODEFAULTLIB:libcmt.lib', 'SUBSYSTEM:CONSOLE'])
    # Debug/Release variants
    if env['VARIANT'] == 'debug':
       # Compiler flags for DEBUG builds
       env['CCPDBFLAGS'] = '/Z7'
       env.Append(CPPDEFINES=['_DEBUG', ('_ITERATOR_DEBUG_LEVEL', 2)])
       # Linker flags for DEBUG builds
       env.Append(CXXFLAGS=['/MDd', '/Od', '/Gd', '/Ob1', '/W3'])
       env.Append(LINKFLAGS=['/debug'])
    else:
       # Compiler flags for RELEASE builds
       env.Append(CPPDEFINES=[('_ITERATOR_DEBUG_LEVEL', 0)])
       env.Append(CXXFLAGS=['/MD', '/Gy', '/O1', '/Ob2', '/W3'])
       # Linker flags for RELEASE builds
       env.Append(LINKFLAGS=['/opt:ref'])

if env['PLATFORM'] == 'posix':
       env.Append(CPPDEFINES=['QCC_OS_GROUP_POSIX'])
       env.Append(CPPDEFINES = ['_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC'])
       # Compiler flags
       env.Append(CXXFLAGS = [
                  '-Wall',
                  '-Werror=non-virtual-dtor',
                  '-pipe',
                  '-std=gnu++0x',
                  '-fno-exceptions',
                  '-fno-strict-aliasing',
                  '-fno-asynchronous-unwind-tables',
                  '-fno-unwind-tables',
                  '-ffunction-sections',
                  '-fdata-sections',
                  '-Wno-long-long',
                  '-Wno-deprecated',
                  '-Wno-unknown-pragmas'])
       # Debug/Release Variants
       if env['VARIANT'] == 'debug':
          env.Append(CXXFLAGS = '-g')
       else:
          env.Append(CXXFLAGS = '-Os')

if env['PLATFORM'] == 'darwin':
    env.Append(LIBS=['crypto'])
    env.Append(CPPDEFINES=['QCC_OS_GROUP_POSIX'])
    env.Append(CPPDEFINES=['QCC_OS_DARWIN'])
    env.Append(CPPDEFINES = ['_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC'])

    env['PATH'] = '$IPHONE_OS_PLATFORM_DIR/Developer/usr/bin:$SYSTEM_DEVELOPER_DIR/usr/bin:$PATH'

    env['CC'] = '$DT_TOOLCHAIN_DIR/usr/bin/clang'
    env['CXX'] = '$DT_TOOLCHAIN_DIR/usr/bin/clang++'

    # Compiler flags
    env.Append(CFLAGS=[
            '-fdiagnostics-show-category=id',
            '-fdiagnostics-parseable-fixits',
            '-fpascal-strings',
            '-Wreturn-type',
            '-Wparentheses',
            '-Wswitch',
            '-Wno-unused-parameter',
            '-Wunused-variable', 
            '-Wunused-value'])
    env.Append(CXXFLAGS=[
            '-fno-rtti',
            '-fno-exceptions',
            '-Wc++11-extensions',
            '-std=gnu++11'])

    ccld = ['-arch', 'i386', '-arch', 'x86_64', '-mmacosx-version-min=10.9']

    env.Append(CXXFLAGS=ccld)
    env.Append(CFLAGS=ccld)
    env.Append(LINKFLAGS=ccld)

    # Debug/Release Variants
    if env['VARIANT'] == 'debug':
       env.Append(CXXFLAGS = '-g')
    else:
       env.Append(CXXFLAGS = '-Os')

#######################################################
#
# Now the actual build stuff
#
#######################################################

distdir = os.environ.get('ALLJOYN_DISTDIR')

# Make sure we have the correct dist variant
if env['VARIANT'] == 'debug':
    distdir = string.replace(distdir, 'release', 'debug')
else:
    distdir = string.replace(distdir, 'debug', 'release')

env.Append(LIBPATH=[distdir + '/cpp/lib'])
env.Append(LIBPATH=[distdir + '/about/lib'])
env.Append(CPPPATH=[distdir + '/cpp/inc'])

# Build apps with bundled daemon support
env.Prepend(LIBS = ['alljoyn','ajrouter'])

progs = env.SConscript('SConscript', 'env', variant_dir='build/$VARIANT', duplicate=0)

env.Install('.', progs)
